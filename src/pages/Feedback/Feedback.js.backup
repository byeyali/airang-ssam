import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useUser } from "../../contexts/UserContext";
import { useMatching } from "../../contexts/MatchingContext";
import { useApplication } from "../../contexts/ApplicationContext";
import feedbackStorageService from "../../services/feedbackStorage";
import "./Feedback.css";

function Feedback() {
  const { user } = useUser();
  const navigate = useNavigate();
  const { getMatchingRequestsForParent } = useMatching();
  const { getAllApplications } = useApplication();
  const [feedbacks, setFeedbacks] = useState([]);
  const [selectedFeedback, setSelectedFeedback] = useState(null);
  const [parentResponse, setParentResponse] = useState("");
  const [teacherResponse, setTeacherResponse] = useState("");
  const [isTeacherWriting, setIsTeacherWriting] = useState(false);
  const [isTeacherSendingToParent, setIsTeacherSendingToParent] =
    useState(false);
  const [teacherToParentMessage, setTeacherToParentMessage] = useState("");
  const [isSaving, setIsSaving] = useState(false);
  const [saveStatus, setSaveStatus] = useState(""); // "saved", "saving", "error"

  useEffect(() => {
    if (user) {
      loadFeedbacks();
    }
  }, [user]);

  const loadFeedbacks = () => {
    let allMatchings = [];
    const allApplications = getAllApplications();

    // 모든 사용자 타입에 대해 피드백 데이터 제공
    if (user.type === "admin") {
      // 관리자는 모든 매칭 데이터를 볼 수 있도록
      allMatchings = [
        {
          id: "matching_001",
          parentId: "user_001",
          teacherId: "teacher_001",
          teacherName: "김영희",
          applicationId: "app_001",
          status: "accepted",
          createdAt: "2025-08-15T10:00:00Z",
        },
        {
          id: "matching_002",
          parentId: "user_002",
          teacherId: "teacher_002",
          teacherName: "박민수",
          applicationId: "app_002",
          status: "accepted",
          createdAt: "2025-08-14T14:00:00Z",
        },
        {
          id: "matching_004",
          parentId: "user_004",
          teacherId: "teacher_003",
          teacherName: "김태현",
          applicationId: "app_004",
          status: "accepted",
          createdAt: "2025-08-12T16:00:00Z",
        },
        {
          id: "matching_007",
          parentId: "user_005",
          teacherId: "teacher_001",
          teacherName: "김영희",
          applicationId: "app_007",
          status: "accepted",
          createdAt: "2025-08-08T09:00:00Z",
        },
      ];
    } else if (
      user.type === "parent" ||
      user.type === "Parent" ||
      user.type === "PARENT"
    ) {
      // 부모는 자신의 매칭만 볼 수 있도록 (데모용으로 더미 데이터 제공)
      const parentMatchings = getMatchingRequestsForParent(user.id);
      if (parentMatchings && parentMatchings.length > 0) {
        allMatchings = parentMatchings;
      } else {
        // 부모 매칭이 없으면 데모 데이터 제공 (현재 로그인한 부모의 ID와 연결)
        allMatchings = [
          {
            id: "matching_parent_001",
            parentId: user.id,
            teacherId: "teacher_001",
            teacherName: "김영희",
            applicationId: "app_parent_001",
            status: "accepted",
            createdAt: "2025-08-15T10:00:00Z",
          },
          {
            id: "matching_parent_002",
            parentId: user.id,
            teacherId: "teacher_002",
            teacherName: "박민수",
            applicationId: "app_parent_002",
            status: "accepted",
            createdAt: "2025-08-14T14:00:00Z",
          },
        ];
      }
    } else {
      // 쌤과 기타 사용자는 모든 피드백을 볼 수 있도록 (데모용)
      allMatchings = [
        {
          id: "matching_001",
          parentId: "user_001",
          teacherId: "teacher_001",
          teacherName: "김영희",
          applicationId: "app_001",
          status: "accepted",
          createdAt: "2025-08-15T10:00:00Z",
        },
        {
          id: "matching_002",
          parentId: "user_002",
          teacherId: "teacher_002",
          teacherName: "박민수",
          applicationId: "app_002",
          status: "accepted",
          createdAt: "2025-08-14T14:00:00Z",
        },
        {
          id: "matching_004",
          parentId: "user_004",
          teacherId: "teacher_003",
          teacherName: "김태현",
          applicationId: "app_004",
          status: "accepted",
          createdAt: "2025-08-12T16:00:00Z",
        },
        {
          id: "matching_007",
          parentId: "user_005",
          teacherId: "teacher_001",
          teacherName: "김영희",
          applicationId: "app_007",
          status: "accepted",
          createdAt: "2025-08-08T09:00:00Z",
        },
      ];
    }

    // 수락된 매칭만 필터링
    const acceptedMatchings = allMatchings.filter(
      (m) => m.status === "accepted"
    );

    // 피드백 데이터 생성 (실제로는 API에서 가져올 데이터)
    const feedbackData = acceptedMatchings.map((matching) => {
      const application = allApplications.find(
        (app) => app.id === matching.applicationId
      );

      // 매칭별로 다른 피드백 내용 설정
      let teacherFeedback = {};
      let parentFeedback = "";
      let isCompleted = false;
      let lessonDate = "2025-08-15"; // 기본 날짜

      if (matching.id === "matching_001") {
        // 김가정-김영희 (피아노, 미술) - 오늘
        lessonDate = "2025-08-15";
        teacherFeedback = {
          childStatus:
            "오늘 민수가 피아노 연주를 정말 잘했어요! 손가락 자세도 좋아졌고, 리듬감도 훨씬 좋아졌습니다. 미술 시간에는 창의적으로 그림을 그려서 놀랐어요.",
          childAttitude:
            "수업 중에 질문도 많이 하고, 새로운 것을 배우는 것에 대한 호기심이 많습니다. 매우 긍정적인 태도로 수업에 임하고 있습니다.",
          improvement:
            "다음 수업에서는 더 복잡한 곡을 도전해보고, 미술에서는 다양한 재료를 활용한 작품을 만들어보면 좋을 것 같습니다.",
          additionalNotes:
            "아이가 음악에 대한 관심이 매우 높아서, 다음에는 음악 이론도 조금씩 가르쳐보려고 합니다.",
        };
        parentFeedback =
          "민수가 집에서도 피아노 연습을 열심히 하고 있어요. 쌤 덕분에 음악에 대한 관심이 더욱 커진 것 같습니다. 다음 수업에서도 재미있게 가르쳐주세요!";
        isCompleted = true;
      } else if (matching.id === "matching_002") {
        // 박영희-박민수 (영어, 체육) - 어제
        lessonDate = "2025-08-14";
        teacherFeedback = {
          childStatus:
            "지영이가 영어 발음이 정말 좋아졌어요! 체육 시간에는 활발하게 뛰어놀면서 에너지 넘치는 모습을 보여줬습니다.",
          childAttitude:
            "영어 수업에서 자신감 있게 대답하고, 체육 시간에는 친구들과 잘 어울려서 놀았어요. 매우 긍정적인 태도입니다.",
          improvement:
            "영어 문법을 조금 더 체계적으로 가르치고, 체육에서는 다양한 운동을 통해 체력을 키워보면 좋을 것 같습니다.",
          additionalNotes:
            "지영이가 영어 동요를 좋아해서, 다음에는 영어 동요도 함께 불러보려고 합니다.",
        };
        parentFeedback =
          "지영이가 영어를 정말 좋아하게 되었어요! 체육도 열심히 하고 있어서 기쁩니다.";
        isCompleted = true;
      } else if (matching.id === "matching_004") {
        // 최지영-김태현 (체육, 건강관리) - 3일 전
        lessonDate = "2025-08-12";
        teacherFeedback = {
          childStatus:
            "소영이가 오늘 체육 활동을 정말 열심히 했어요! 체력이 좋아진 것 같고, 건강한 생활습관도 잘 지키고 있습니다.",
          childAttitude:
            "운동을 좋아하고, 규칙적인 생활습관을 잘 따르고 있어요. 매우 모범적인 태도입니다.",
          improvement:
            "다양한 스포츠를 경험해보고, 건강한 식습관도 함께 가르쳐보면 좋을 것 같습니다.",
          additionalNotes:
            "소영이가 축구에 관심을 보여서, 다음에는 축구도 가르쳐보려고 합니다.",
        };
        parentFeedback =
          "소영이가 요즘 운동을 정말 좋아하게 되었어요. 쌤 덕분에 건강한 생활습관도 잘 들고 있습니다. 감사합니다!";
        isCompleted = true;
      } else if (matching.id === "matching_007") {
        // 김태현-김영희 (영어, 수학) - 1주일 전
        lessonDate = "2025-08-08";
        teacherFeedback = {
          childStatus:
            "민지가 영어와 수학을 정말 잘 따라와요! 특히 수학 문제를 풀 때 논리적으로 생각하는 모습이 인상적이었습니다.",
          childAttitude:
            "수업에 집중력이 좋고, 어려운 문제도 포기하지 않고 도전하는 모습이 보기 좋았어요.",
          improvement:
            "영어 회화를 조금 더 연습하고, 수학에서는 응용 문제도 함께 풀어보면 좋을 것 같습니다.",
          additionalNotes:
            "민지가 영어 동화책을 좋아해서, 다음에는 영어 동화책도 함께 읽어보려고 합니다.",
        };
        parentFeedback =
          "민지가 수학을 정말 좋아하게 되었어요! 영어도 자신감 있게 말하는 모습이 보기 좋습니다.";
        isCompleted = true;
      } else if (matching.id === "matching_parent_001") {
        // 부모용 매칭 1
        lessonDate = "2025-08-15";
        teacherFeedback = {
          childStatus:
            "아이가 오늘 수업에 정말 잘 참여했어요! 새로운 것을 배우는 것에 대한 관심이 많고, 긍정적인 태도로 임하고 있습니다.",
          childAttitude:
            "수업 중에 집중력이 좋고, 질문도 적극적으로 하는 모습이 보기 좋았습니다.",
          improvement:
            "다음 수업에서도 이런 긍정적인 태도를 유지하면서 더 많은 것을 배워보면 좋겠습니다.",
          additionalNotes:
            "아이가 학습에 대한 동기가 높아서, 앞으로도 좋은 성과를 기대할 수 있을 것 같습니다.",
        };
        parentFeedback = ""; // 부모가 작성할 예정
        isCompleted = false;
      } else if (matching.id === "matching_parent_002") {
        // 부모용 매칭 2
        lessonDate = "2025-08-14";
        teacherFeedback = {
          childStatus:
            "아이가 오늘도 열심히 수업에 참여했어요! 특히 실습 시간에 적극적으로 참여하는 모습이 인상적이었습니다.",
          childAttitude:
            "새로운 것을 배우는 것에 대한 호기심이 많고, 친구들과도 잘 협력합니다.",
          improvement: "다음에는 더 복잡한 활동도 도전해보면 좋을 것 같습니다.",
          additionalNotes: "아이가 이 과목에 대한 관심이 높아서 기쁩니다.",
        };
        parentFeedback = ""; // 부모가 작성할 예정
        isCompleted = false;
      } else {
        // 기본 피드백 - 2주일 전
        lessonDate = "2025-08-01";
        teacherFeedback = {
          childStatus:
            "오늘 아이가 수업에 잘 참여했습니다. 새로운 것을 배우는 것에 대한 관심이 많고, 긍정적인 태도로 임하고 있습니다.",
          childAttitude:
            "수업 중에 집중력이 좋고, 질문도 적극적으로 하는 모습이 보기 좋았습니다.",
          improvement:
            "다음 수업에서도 이런 긍정적인 태도를 유지하면서 더 많은 것을 배워보면 좋겠습니다.",
          additionalNotes:
            "아이가 학습에 대한 동기가 높아서, 앞으로도 좋은 성과를 기대할 수 있을 것 같습니다.",
        };
        parentFeedback =
          "아이가 수업을 정말 재미있어하고 있어요. 쌤 덕분에 학습 의욕이 높아진 것 같습니다.";
        isCompleted = true;
      }

      return {
        id: `feedback_${matching.id}`,
        matchingId: matching.id,
        parentId: matching.parentId || user.id, // 매칭의 parentId 또는 현재 사용자 ID
        teacherName: matching.teacherName,
        applicationTitle: application?.title || "공고 제목 없음",
        lessonDate: lessonDate,
        subject: application?.purpose || "과목 정보 없음",
        teacherFeedback,
        parentFeedback,
        isCompleted,
        createdAt: matching.createdAt,
      };
    });

    // 추가 과거 피드백 데이터 (가상 데이터) - 부모 피드백 포함
    const additionalFeedbacks = [
      {
        id: "feedback_past_001",
        matchingId: "past_001",
        parentId:
          user.type === "parent" ||
          user.type === "Parent" ||
          user.type === "PARENT"
            ? user.id
            : "user_001",
        teacherName: "김영희",
        applicationTitle: "피아노 기초 레슨",
        lessonDate: "2025-07-25",
        subject: "피아노",
        teacherFeedback: {
          childStatus:
            "민수가 피아노 기초를 정말 잘 배우고 있어요! 손가락 자세도 점점 좋아지고 있습니다.",
          childAttitude:
            "매우 열심히 연습하고, 새로운 곡을 배우는 것을 좋아합니다.",
          improvement: "다음에는 더 복잡한 리듬을 연습해보면 좋을 것 같습니다.",
          additionalNotes: "음악에 대한 관심이 높아서 기쁩니다.",
        },
        parentFeedback:
          "민수가 피아노를 정말 좋아하게 되었어요! 매일 연습하고 있어서 기쁩니다.",
        isCompleted: true,
        createdAt: "2025-07-25T10:00:00Z",
      },
      {
        id: "feedback_past_002",
        matchingId: "past_002",
        parentId:
          user.type === "parent" ||
          user.type === "Parent" ||
          user.type === "PARENT"
            ? user.id
            : "user_002",
        teacherName: "박민수",
        applicationTitle: "영어 회화 수업",
        lessonDate: "2025-07-18",
        subject: "영어",
        teacherFeedback: {
          childStatus:
            "지영이가 영어 발음이 많이 좋아졌어요! 자신감 있게 영어로 대화하는 모습이 인상적입니다.",
          childAttitude: "영어 수업을 정말 즐기고, 적극적으로 참여합니다.",
          improvement: "문법도 조금씩 가르쳐보면 더 좋을 것 같습니다.",
          additionalNotes: "영어 동요도 함께 불러보고 있어요.",
        },
        parentFeedback:
          "지영이가 영어를 정말 좋아하게 되었어요! 집에서도 영어로 말하는 모습을 볼 수 있어서 기쁩니다.",
        isCompleted: true,
        createdAt: "2025-07-18T14:00:00Z",
      },
      {
        id: "feedback_past_003",
        matchingId: "past_003",
        parentId:
          user.type === "parent" ||
          user.type === "Parent" ||
          user.type === "PARENT"
            ? user.id
            : "user_004",
        teacherName: "김태현",
        applicationTitle: "체육 활동",
        lessonDate: "2025-07-11",
        subject: "체육",
        teacherFeedback: {
          childStatus:
            "소영이가 체육 활동을 정말 열심히 하고 있어요! 체력이 많이 좋아졌습니다.",
          childAttitude: "운동을 좋아하고, 규칙적으로 참여합니다.",
          improvement: "다양한 스포츠를 경험해보면 좋을 것 같습니다.",
          additionalNotes: "축구에 특히 관심을 보이고 있어요.",
        },
        parentFeedback:
          "소영이가 운동을 정말 좋아하게 되었어요! 건강한 생활습관도 들고 있어서 기쁩니다.",
        isCompleted: true,
        createdAt: "2025-07-11T16:00:00Z",
      },
      {
        id: "feedback_past_004",
        matchingId: "past_004",
        teacherName: "김영희",
        applicationTitle: "수학 기초 학습",
        lessonDate: "2025-07-04",
        subject: "수학",
        teacherFeedback: {
          childStatus:
            "민지가 수학을 정말 잘 이해하고 있어요! 논리적으로 생각하는 능력이 뛰어납니다.",
          childAttitude:
            "수학 문제를 풀 때 집중력이 좋고, 어려운 문제도 도전합니다.",
          improvement: "응용 문제도 함께 풀어보면 더 좋을 것 같습니다.",
          additionalNotes: "수학에 대한 관심이 높아서 기쁩니다.",
        },
        parentFeedback:
          "민지가 수학을 정말 좋아하게 되었어요! 문제를 풀 때 자신감 있는 모습이 보기 좋습니다.",
        isCompleted: true,
        createdAt: "2025-07-04T09:00:00Z",
      },
      // 부모 피드백 시나리오 추가
      {
        id: "feedback_parent_001",
        matchingId: "parent_001",
        parentId:
          user.type === "parent" ||
          user.type === "Parent" ||
          user.type === "PARENT"
            ? user.id
            : "user_001",
        teacherName: "김영희",
        applicationTitle: "피아노 중급 레슨",
        lessonDate: "2025-07-20",
        subject: "피아노",
        teacherFeedback: {
          childStatus:
            "민수가 피아노 실력이 정말 많이 늘었어요! 이제 중급 곡도 잘 연주합니다.",
          childAttitude:
            "매일 연습하는 습관이 잘 들었고, 새로운 곡에 대한 도전 의식이 강합니다.",
          improvement: "다음에는 더 어려운 곡을 도전해보면 좋을 것 같습니다.",
          additionalNotes: "음악 이론도 함께 가르쳐보고 있어요.",
        },
        parentFeedback:
          "민수가 피아노를 정말 좋아하게 되었어요! 매일 연습하는 모습을 보니 기쁩니다. 쌤 덕분에 음악에 대한 관심이 더욱 깊어졌고, 집에서도 피아노 연습을 열심히 하고 있어요. 다음 수업에서도 재미있게 가르쳐주세요!",
        isCompleted: true,
        createdAt: "2025-07-20T15:00:00Z",
      },
      {
        id: "feedback_parent_002",
        matchingId: "parent_002",
        teacherName: "박민수",
        applicationTitle: "영어 문법 수업",
        lessonDate: "2025-07-15",
        subject: "영어",
        teacherFeedback: {
          childStatus:
            "지영이가 영어 문법을 정말 잘 이해하고 있어요! 문장 구조도 잘 파악합니다.",
          childAttitude: "문법 수업도 재미있어하고, 복습을 열심히 합니다.",
          improvement: "다음에는 더 복잡한 문법을 가르쳐보면 좋을 것 같습니다.",
          additionalNotes: "영어 작문도 함께 연습해보고 있어요.",
        },
        parentFeedback:
          "지영이가 영어를 정말 좋아하게 되었어요! 집에서도 영어로 말하는 모습을 볼 수 있어서 기쁩니다. 문법도 체계적으로 배우고 있어서 영어 실력이 많이 늘었어요. 쌤 덕분에 영어에 대한 자신감이 생겼습니다.",
        isCompleted: true,
        createdAt: "2025-07-15T13:00:00Z",
      },
      {
        id: "feedback_parent_003",
        matchingId: "parent_003",
        teacherName: "김태현",
        applicationTitle: "축구 특기 교육",
        lessonDate: "2025-07-10",
        subject: "체육",
        teacherFeedback: {
          childStatus:
            "소영이가 축구를 정말 잘하고 있어요! 기본기가 탄탄하고 팀워크도 좋습니다.",
          childAttitude: "축구를 정말 좋아하고, 매일 연습하려고 노력합니다.",
          improvement: "다음에는 더 고급 기술을 가르쳐보면 좋을 것 같습니다.",
          additionalNotes: "축구 대회에도 참가해보고 있어요.",
        },
        parentFeedback:
          "소영이가 축구를 정말 좋아하게 되었어요! 매일 운동하는 습관이 들었고, 건강한 생활습관도 함께 배우고 있어서 기쁩니다. 쌤 덕분에 체력도 좋아지고 자신감도 생겼어요. 다음 수업도 기대하고 있습니다!",
        isCompleted: true,
        createdAt: "2025-07-10T17:00:00Z",
      },
      {
        id: "feedback_parent_004",
        matchingId: "parent_004",
        teacherName: "이미영",
        applicationTitle: "수학 기초 학습",
        lessonDate: "2025-07-05",
        subject: "수학",
        teacherFeedback: {
          childStatus:
            "준호가 수학을 정말 잘 이해하고 있어요! 논리적으로 생각하는 능력이 뛰어납니다.",
          childAttitude:
            "수학 문제를 풀 때 집중력이 좋고, 어려운 문제도 도전합니다.",
          improvement: "응용 문제도 함께 풀어보면 더 좋을 것 같습니다.",
          additionalNotes: "수학에 대한 관심이 높아서 기쁩니다.",
        },
        parentFeedback:
          "준호가 수학을 정말 좋아하게 되었어요! 문제를 풀 때 자신감 있는 모습이 보기 좋습니다. 쌤 덕분에 수학에 대한 두려움이 사라지고, 재미있게 공부하고 있어요. 집에서도 수학 문제를 스스로 풀려고 노력하는 모습이 기쁩니다.",
        isCompleted: true,
        createdAt: "2025-07-05T11:00:00Z",
      },
      {
        id: "feedback_parent_005",
        matchingId: "parent_005",
        teacherName: "최수진",
        applicationTitle: "미술 창작 활동",
        lessonDate: "2025-06-28",
        subject: "미술",
        teacherFeedback: {
          childStatus:
            "예은이가 미술에 정말 재능이 있어요! 창의적인 아이디어가 많고 표현력도 뛰어납니다.",
          childAttitude:
            "미술 수업을 정말 즐기고, 다양한 재료를 활용한 작품을 만듭니다.",
          improvement: "다양한 기법을 더 배워보면 좋을 것 같습니다.",
          additionalNotes: "예은이의 작품들이 정말 아름다워요.",
        },
        parentFeedback:
          "예은이가 미술을 정말 좋아하게 되었어요! 집에서도 그림을 그리며 창의력을 발휘하고 있어요. 쌤 덕분에 예술에 대한 관심이 깊어졌고, 자신만의 독특한 스타일도 만들어가고 있습니다. 다음 작품도 기대하고 있어요!",
        isCompleted: true,
        createdAt: "2025-06-28T14:00:00Z",
      },
      {
        id: "feedback_parent_006",
        matchingId: "parent_006",
        teacherName: "박준호",
        applicationTitle: "과학 실험 수업",
        lessonDate: "2025-06-20",
        subject: "과학",
        teacherFeedback: {
          childStatus:
            "현우가 과학 실험을 정말 잘하고 있어요! 호기심이 많고 관찰력도 뛰어납니다.",
          childAttitude: "실험을 안전하게 진행하고, 결과를 정확히 기록합니다.",
          improvement: "더 복잡한 실험도 도전해보면 좋을 것 같습니다.",
          additionalNotes: "과학에 대한 탐구 정신이 대단해요.",
        },
        parentFeedback:
          "현우가 과학을 정말 좋아하게 되었어요! 집에서도 간단한 실험을 해보려고 하고, 자연 현상에 대한 호기심이 많아졌어요. 쌤 덕분에 과학적 사고력이 발달했고, 탐구 정신도 키워졌습니다. 다음 실험도 기대하고 있어요!",
        isCompleted: true,
        createdAt: "2025-06-20T16:00:00Z",
      },
      {
        id: "feedback_parent_007",
        matchingId: "parent_007",
        teacherName: "김민지",
        applicationTitle: "한국어 독서 지도",
        lessonDate: "2025-06-15",
        subject: "국어",
        teacherFeedback: {
          childStatus:
            "서연이가 독서를 정말 좋아하게 되었어요! 다양한 책을 읽고 이해력도 좋아졌습니다.",
          childAttitude:
            "책을 읽을 때 집중력이 좋고, 내용을 정확히 파악합니다.",
          improvement: "다양한 장르의 책을 더 읽어보면 좋을 것 같습니다.",
          additionalNotes: "독서 토론도 함께 하고 있어요.",
        },
        parentFeedback:
          "서연이가 독서를 정말 좋아하게 되었어요! 매일 책을 읽는 습관이 들었고, 어휘력도 많이 늘었어요. 쌤 덕분에 독서에 대한 흥미가 생겼고, 다양한 책을 통해 세상을 더 넓게 바라보게 되었습니다. 다음 책도 기대하고 있어요!",
        isCompleted: true,
        createdAt: "2025-06-15T13:00:00Z",
      },
      {
        id: "feedback_parent_008",
        matchingId: "parent_008",
        teacherName: "이상훈",
        applicationTitle: "컴퓨터 프로그래밍",
        lessonDate: "2025-06-10",
        subject: "컴퓨터",
        teacherFeedback: {
          childStatus:
            "도현이가 프로그래밍을 정말 잘하고 있어요! 논리적 사고력이 뛰어나고 코딩 실력도 좋습니다.",
          childAttitude:
            "새로운 언어를 배우는 것을 좋아하고, 창의적인 프로그램을 만듭니다.",
          improvement: "더 복잡한 프로젝트도 도전해보면 좋을 것 같습니다.",
          additionalNotes: "미래의 프로그래머가 될 것 같아요.",
        },
        parentFeedback:
          "도현이가 프로그래밍을 정말 좋아하게 되었어요! 집에서도 컴퓨터로 다양한 프로그램을 만들어보려고 하고, 논리적 사고력이 많이 발달했어요. 쌤 덕분에 미래 기술에 대한 관심이 깊어졌고, 창의적인 아이디어도 많이 생겼습니다. 다음 프로젝트도 기대하고 있어요!",
        isCompleted: true,
        createdAt: "2025-06-10T15:00:00Z",
      },
      {
        id: "feedback_parent_009",
        matchingId: "parent_009",
        teacherName: "정유진",
        applicationTitle: "요리 및 영양 교육",
        lessonDate: "2025-06-05",
        subject: "요리",
        teacherFeedback: {
          childStatus:
            "민서가 요리를 정말 잘하고 있어요! 안전하게 조리하고 맛있는 음식을 만듭니다.",
          childAttitude:
            "요리 수업을 정말 즐기고, 영양에 대한 관심도 많습니다.",
          improvement: "더 다양한 요리를 배워보면 좋을 것 같습니다.",
          additionalNotes: "건강한 식습관도 함께 가르쳐보고 있어요.",
        },
        parentFeedback:
          "민서가 요리를 정말 좋아하게 되었어요! 집에서도 간단한 요리를 도와주려고 하고, 건강한 식습관도 들고 있어요. 쌤 덕분에 영양에 대한 관심이 생겼고, 가족과 함께 요리하는 시간도 즐기고 있습니다. 다음 요리도 기대하고 있어요!",
        isCompleted: true,
        createdAt: "2025-06-05T12:00:00Z",
      },
      {
        id: "feedback_parent_010",
        matchingId: "parent_010",
        teacherName: "한지원",
        applicationTitle: "태권도 수련",
        lessonDate: "2025-05-30",
        subject: "태권도",
        teacherFeedback: {
          childStatus:
            "준영이가 태권도를 정말 잘하고 있어요! 기본기가 탄탄하고 정신력도 강합니다.",
          childAttitude:
            "태권도 수련을 열심히 하고, 예의 바른 태도를 보여줍니다.",
          improvement: "더 고급 기술을 배워보면 좋을 것 같습니다.",
          additionalNotes: "태권도 정신도 함께 가르쳐보고 있어요.",
        },
        parentFeedback:
          "준영이가 태권도를 정말 좋아하게 되었어요! 매일 연습하는 습관이 들었고, 예의 바른 태도도 배우고 있어요. 쌤 덕분에 체력도 좋아지고 자신감도 생겼습니다. 태권도 정신도 함께 배우고 있어서 기쁩니다. 다음 수업도 기대하고 있어요!",
        isCompleted: true,
        createdAt: "2025-05-30T17:00:00Z",
      },
    ];

    // 모든 피드백 데이터 합치기
    const allFeedbacks = [...feedbackData, ...additionalFeedbacks];

    // 부모가 로그인한 경우 추가 피드백에서도 부모 관련 것만 필터링
    let filteredAdditionalFeedbacks = additionalFeedbacks;
    if (
      user.type === "parent" ||
      user.type === "Parent" ||
      user.type === "PARENT"
    ) {
      filteredAdditionalFeedbacks = additionalFeedbacks.filter((feedback) => {
        const isParentFeedback = feedback.id?.includes("parent");
        const isParentMatching = feedback.matchingId?.includes("parent");
        const isExactParentMatch = feedback.parentId === user.id;
        
        return isParentFeedback || isParentMatching || isExactParentMatch;
      });
    }

    // 필터링된 피드백 데이터 합치기
    const allFeedbacksFiltered = [...feedbackData, ...filteredAdditionalFeedbacks];

    // 부모가 로그인한 경우 부모 관련 피드백만 필터링
    let filteredFeedbacks = allFeedbacksFiltered;
    if (
      user.type === "parent" ||
      user.type === "Parent" ||
      user.type === "PARENT"
    ) {
      // 부모가 로그인한 경우 부모 관련 피드백만 표시
            console.log("부모 필터링 완료:", {
        userId: user.id,
        userType: user.type,
        totalFeedbacks: allFeedbacksFiltered.length,
        filteredCount: filteredFeedbacks.length,
        allFeedbacks: allFeedbacksFiltered.map((f) => ({
          id: f.id,
          parentId: f.parentId,
          matchingId: f.matchingId,
        })),
      });
    }

      console.log("부모 필터링 결과:", {
        filteredCount: filteredFeedbacks.length,
        filteredFeedbacks: filteredFeedbacks.map((f) => ({
          id: f.id,
          parentId: f.parentId,
          matchingId: f.matchingId,
        })),
      });
    }

    // 부모 피드백이 없는 경우 강제로 추가
    const feedbacksWithParentFeedback = filteredFeedbacks.map((feedback) => {
      if (!feedback.parentFeedback && feedback.teacherFeedback) {
        return {
          ...feedback,
          parentFeedback: `부모님의 피드백: ${feedback.teacherName} 쌤과의 수업이 정말 좋았습니다. 아이가 ${feedback.subject}에 대한 관심이 높아졌고, 집에서도 열심히 연습하고 있어요. 쌤 덕분에 아이의 학습 의욕이 높아진 것 같습니다. 다음 수업도 기대하고 있습니다!`,
        };
      }
      return feedback;
    });

    // 관리자인 경우 더 많은 피드백 데이터 추가
    let adminFeedbacks = [];
    if (user.type === "admin") {
      adminFeedbacks = [
        // 추가 관리자용 피드백 데이터 - 부모 피드백 포함
        {
          id: "admin_feedback_001",
          matchingId: "admin_001",
          parentId: "user_001",
          teacherName: "김영희",
          applicationTitle: "피아노 고급 레슨",
          lessonDate: "2025-07-30",
          subject: "피아노",
          teacherFeedback: {
            childStatus:
              "민수가 고급 피아노 곡을 정말 잘 연주하고 있어요! 테크닉이 많이 발전했습니다.",
            childAttitude:
              "매우 열심히 연습하고, 새로운 곡에 대한 도전 의식이 강합니다.",
            improvement: "다음에는 더 어려운 곡을 도전해보면 좋을 것 같습니다.",
            additionalNotes: "음악 이론도 함께 가르쳐보고 있어요.",
          },
          parentFeedback:
            "민수가 피아노를 정말 좋아하게 되었어요! 매일 연습하는 모습을 보니 기쁩니다. 쌤 덕분에 음악에 대한 관심이 더욱 깊어졌고, 집에서도 피아노 연습을 열심히 하고 있어요. 다음 수업에서도 재미있게 가르쳐주세요!",
          isCompleted: true,
          createdAt: "2025-07-30T15:00:00Z",
        },
        {
          id: "admin_feedback_002",
          matchingId: "admin_002",
          teacherName: "박민수",
          applicationTitle: "영어 고급 문법",
          lessonDate: "2025-07-25",
          subject: "영어",
          teacherFeedback: {
            childStatus:
              "지영이가 영어 문법을 정말 잘 이해하고 있어요! 문장 구조도 잘 파악합니다.",
            childAttitude: "문법 수업도 재미있어하고, 복습을 열심히 합니다.",
            improvement:
              "다음에는 더 복잡한 문법을 가르쳐보면 좋을 것 같습니다.",
            additionalNotes: "영어 작문도 함께 연습해보고 있어요.",
          },
          parentFeedback:
            "지영이가 영어를 정말 좋아하게 되었어요! 집에서도 영어로 말하는 모습을 볼 수 있어서 기쁩니다. 문법도 체계적으로 배우고 있어서 영어 실력이 많이 늘었어요. 쌤 덕분에 영어에 대한 자신감이 생겼습니다.",
          isCompleted: true,
          createdAt: "2025-07-25T13:00:00Z",
        },
        {
          id: "admin_feedback_003",
          matchingId: "admin_003",
          teacherName: "김태현",
          applicationTitle: "축구 고급 기술",
          lessonDate: "2025-07-20",
          subject: "체육",
          teacherFeedback: {
            childStatus:
              "소영이가 축구를 정말 잘하고 있어요! 기본기가 탄탄하고 팀워크도 좋습니다.",
            childAttitude: "축구를 정말 좋아하고, 매일 연습하려고 노력합니다.",
            improvement: "다음에는 더 고급 기술을 가르쳐보면 좋을 것 같습니다.",
            additionalNotes: "축구 대회에도 참가해보고 있어요.",
          },
          parentFeedback:
            "소영이가 축구를 정말 좋아하게 되었어요! 매일 운동하는 습관이 들었고, 건강한 생활습관도 함께 배우고 있어서 기쁩니다. 쌤 덕분에 체력도 좋아지고 자신감도 생겼어요. 다음 수업도 기대하고 있습니다!",
          isCompleted: true,
          createdAt: "2025-07-20T17:00:00Z",
        },
        {
          id: "admin_feedback_004",
          matchingId: "admin_004",
          teacherName: "이미영",
          applicationTitle: "수학 고급 학습",
          lessonDate: "2025-07-15",
          subject: "수학",
          teacherFeedback: {
            childStatus:
              "준호가 수학을 정말 잘 이해하고 있어요! 논리적으로 생각하는 능력이 뛰어납니다.",
            childAttitude:
              "수학 문제를 풀 때 집중력이 좋고, 어려운 문제도 도전합니다.",
            improvement: "응용 문제도 함께 풀어보면 더 좋을 것 같습니다.",
            additionalNotes: "수학에 대한 관심이 높아서 기쁩니다.",
          },
          parentFeedback:
            "준호가 수학을 정말 좋아하게 되었어요! 문제를 풀 때 자신감 있는 모습이 보기 좋습니다. 쌤 덕분에 수학에 대한 두려움이 사라지고, 재미있게 공부하고 있어요. 집에서도 수학 문제를 스스로 풀려고 노력하는 모습이 기쁩니다.",
          isCompleted: true,
          createdAt: "2025-07-15T11:00:00Z",
        },
        {
          id: "admin_feedback_005",
          matchingId: "admin_005",
          teacherName: "최수진",
          applicationTitle: "미술 고급 창작",
          lessonDate: "2025-07-10",
          subject: "미술",
          teacherFeedback: {
            childStatus:
              "예은이가 미술에 정말 재능이 있어요! 창의적인 아이디어가 많고 표현력도 뛰어납니다.",
            childAttitude:
              "미술 수업을 정말 즐기고, 다양한 재료를 활용한 작품을 만듭니다.",
            improvement: "다양한 기법을 더 배워보면 좋을 것 같습니다.",
            additionalNotes: "예은이의 작품들이 정말 아름다워요.",
          },
          parentFeedback:
            "예은이가 미술을 정말 좋아하게 되었어요! 집에서도 그림을 그리며 창의력을 발휘하고 있어요. 쌤 덕분에 예술에 대한 관심이 깊어졌고, 자신만의 독특한 스타일도 만들어가고 있습니다. 다음 작품도 기대하고 있어요!",
          isCompleted: true,
          createdAt: "2025-07-10T14:00:00Z",
        },
      ];
    }

    // 임시 저장된 피드백 불러오기
    const tempFeedbacks = feedbackStorageService.getUserTempFeedbacks(user.id);

    // 임시 저장된 피드백과 기존 피드백 병합
    const mergedFeedbacks = [
      ...feedbacksWithParentFeedback,
      ...adminFeedbacks,
      ...tempFeedbacks,
    ];

    // 날짜순으로 정렬 (최신순)
    mergedFeedbacks.sort(
      (a, b) =>
        new Date(b.lessonDate || b.savedAt) -
        new Date(a.lessonDate || a.savedAt)
    );

    console.log("피드백 로드 완료:", {
      userType: user.type,
      feedbackDataCount: feedbackData.length,
      additionalFeedbacksCount: additionalFeedbacks.length,
      adminFeedbacksCount: adminFeedbacks.length,
      tempFeedbacksCount: tempFeedbacks.length,
      totalFeedbacks: mergedFeedbacks.length,
      allFeedbacks: mergedFeedbacks,
    });

    // 부모 피드백 데이터 확인
    const parentFeedbacks = mergedFeedbacks.filter(
      (feedback) => feedback.parentFeedback
    );
    console.log("부모 피드백 데이터:", {
      userType: user.type,
      userId: user.id,
      totalParentFeedbacks: parentFeedbacks.length,
      totalFeedbacks: mergedFeedbacks.length,
      parentFeedbacks: parentFeedbacks.map((f) => ({
        id: f.id,
        parentId: f.parentId,
        parentFeedback: f.parentFeedback,
      })),
    });

    setFeedbacks(mergedFeedbacks);
  };

  // 자동 저장 함수
  const autoSaveFeedback = (feedbackId, feedbackData) => {
    const feedbackDataWithUser = {
      id: feedbackId,
      userId: user.id,
      userType: user.type,
      ...feedbackData,
    };

    const success = feedbackStorageService.autoSave(feedbackDataWithUser);

    if (success) {
      setSaveStatus("saved");
      setTimeout(() => setSaveStatus(""), 2000);
    } else {
      setSaveStatus("error");
    }
  };

  // 백엔드 저장 함수
  const saveFeedbackToBackend = async (feedbackData) => {
    try {
      setIsSaving(true);
      setSaveStatus("saving");

      const result = await feedbackStorageService.saveToBackend({
        ...feedbackData,
        userId: user.id,
        userType: user.type,
      });

      if (result.success) {
        setSaveStatus("saved");
        setTimeout(() => setSaveStatus(""), 2000);
        return true;
      } else {
        setSaveStatus("error");
        return false;
      }
    } catch (error) {
      console.error("백엔드 저장 실패:", error);
      setSaveStatus("error");
      return false;
    } finally {
      setIsSaving(false);
    }
  };

  const handleFeedbackClick = (feedback) => {
    console.log("피드백 클릭:", {
      feedbackId: feedback.id,
      parentFeedback: feedback.parentFeedback,
      parentFeedbackLength: feedback.parentFeedback
        ? feedback.parentFeedback.length
        : 0,
      parentFeedbackTrimmed: feedback.parentFeedback
        ? feedback.parentFeedback.trim()
        : "",
      teacherFeedback: feedback.teacherFeedback,
      userType: user.type,
    });

    setSelectedFeedback(feedback);
    setParentResponse(feedback.parentFeedback || "");
    setTeacherResponse(feedback.teacherFeedback.childStatus || "");
    setIsTeacherWriting(false);
    setIsTeacherSendingToParent(false);
  };

  const handleSubmitFeedback = () => {
    if (!parentResponse.trim()) {
      alert("피드백을 작성해주세요.");
      return;
    }

    // 피드백 업데이트
    const updatedFeedback = {
      ...selectedFeedback,
      parentFeedback: parentResponse,
      isCompleted: true,
    };

    setFeedbacks((prev) =>
      prev.map((feedback) =>
        feedback.id === selectedFeedback.id ? updatedFeedback : feedback
      )
    );

    // 선택된 피드백도 업데이트
    setSelectedFeedback(updatedFeedback);

    // 임시 저장
    autoSaveFeedback(selectedFeedback.id, updatedFeedback);

    alert("피드백이 성공적으로 제출되었습니다.");
    setParentResponse("");
  };

  const handleSubmitTeacherFeedback = () => {
    if (!teacherResponse.trim()) {
      alert("피드백을 작성해주세요.");
      return;
    }

    // 쌤 피드백 업데이트
    setFeedbacks((prev) =>
      prev.map((feedback) =>
        feedback.id === selectedFeedback.id
          ? {
              ...feedback,
              teacherFeedback: {
                ...feedback.teacherFeedback,
                childStatus: teacherResponse,
              },
            }
          : feedback
      )
    );

    // 선택된 피드백도 업데이트
    setSelectedFeedback((prev) => ({
      ...prev,
      teacherFeedback: {
        ...prev.teacherFeedback,
        childStatus: teacherResponse,
      },
    }));

    setIsTeacherWriting(false);
    setTeacherResponse("");
    alert("피드백이 성공적으로 수정되었습니다.");
  };

  const handleTeacherSendToParent = () => {
    if (!teacherToParentMessage.trim()) {
      alert("메시지를 작성해주세요.");
      return;
    }

    // 쌤이 부모에게 보낸 메시지 업데이트
    setFeedbacks((prev) =>
      prev.map((feedback) =>
        feedback.id === selectedFeedback.id
          ? {
              ...feedback,
              teacherToParentMessage: teacherToParentMessage,
              teacherToParentSentAt: new Date().toISOString(),
            }
          : feedback
      )
    );

    // 선택된 피드백도 업데이트
    setSelectedFeedback((prev) => ({
      ...prev,
      teacherToParentMessage: teacherToParentMessage,
      teacherToParentSentAt: new Date().toISOString(),
    }));

    setIsTeacherSendingToParent(false);
    setTeacherToParentMessage("");
    alert("부모님에게 메시지가 성공적으로 전송되었습니다.");
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString("ko-KR");
  };

  // 접근 권한 확인
  if (!user) {
    return (
      <div className="feedback-page">
        <div className="access-denied">
          <h2>로그인이 필요합니다</h2>
          <p>피드백 기능을 이용하려면 로그인해주세요.</p>
          <button onClick={() => navigate("/login")} className="login-button">
            로그인하기
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="feedback-page">
      <div className="feedback-container">
        <div className="page-header">
          <h1>피드백 보기 및 작성</h1>
          <p>
            {user.type === "admin"
              ? "전체 사용자의 피드백을 확인할 수 있는 관리자 공간입니다"
              : user.type === "parent" ||
                user.type === "Parent" ||
                user.type === "PARENT"
              ? `${user.name}님의 아이와 쌤의 소통 공간입니다`
              : user.type === "teacher" ||
                user.type === "Teacher" ||
                user.type === "TEACHER" ||
                user.type === "tutor" ||
                user.type === "Tutor" ||
                user.type === "TUTOR"
              ? `${user.name}님의 수업 피드백 관리 공간입니다`
              : `${user.name}님의 피드백 확인 공간입니다`}
          </p>
          {saveStatus && (
            <div className={`save-status ${saveStatus}`}>
              {saveStatus === "saving" && "저장 중..."}
              {saveStatus === "saved" && "저장 완료"}
              {saveStatus === "error" && "저장 실패"}
            </div>
          )}
          <div className="storage-info">
            <span className="temp-count">
              임시 저장: {feedbackStorageService.getStorageStatus().tempCount}개
            </span>
            <span className="storage-usage">
              사용량: {feedbackStorageService.getStorageUsage().sizeInKB}KB
            </span>
          </div>
        </div>

        <div className="feedback-content">
          <div className="feedback-list">
            <h2>피드백 목록</h2>
            {feedbacks.length === 0 ? (
              <div className="empty-state">
                <p>아직 피드백이 없습니다.</p>
                <p>
                  {user.type === "admin"
                    ? "현재 등록된 피드백이 없습니다."
                    : user.type === "parent" ||
                      user.type === "Parent" ||
                      user.type === "PARENT"
                    ? "수업이 진행되면 쌤이 작성한 피드백을 확인할 수 있습니다."
                    : user.type === "teacher" ||
                      user.type === "Teacher" ||
                      user.type === "TEACHER" ||
                      user.type === "tutor" ||
                      user.type === "Tutor" ||
                      user.type === "TUTOR"
                    ? "수업을 진행하면 피드백을 작성할 수 있습니다."
                    : "현재 등록된 피드백이 없습니다."}
                </p>
              </div>
            ) : (
              <div className="feedback-items">
                {feedbacks.map((feedback) => (
                  <div
                    key={feedback.id}
                    className={`feedback-item ${
                      selectedFeedback?.id === feedback.id ? "selected" : ""
                    }`}
                    onClick={() => handleFeedbackClick(feedback)}
                  >
                    <div className="feedback-header">
                      <h3>{feedback.teacherName} 쌤</h3>
                    </div>
                    <div className="feedback-info">
                      <p className="feedback-preview">
                        {feedback.teacherFeedback.childStatus}
                      </p>
                      <p className="feedback-date">
                        {formatDate(feedback.lessonDate)}
                        {new Date(feedback.lessonDate) <
                          new Date("2025-08-15") && (
                          <span className="past-indicator"> (지난 피드백)</span>
                        )}
                        {feedback.parentFeedback &&
                          feedback.parentFeedback.trim() && (
                            <span className="parent-feedback-indicator">
                              {" "}
                              • 부모 피드백 있음
                            </span>
                          )}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          {selectedFeedback && (
            <div className="feedback-detail">
              <div className="detail-header">
                <h2>{selectedFeedback.teacherName} 쌤 피드백</h2>
                <button
                  className="close-button"
                  onClick={() => setSelectedFeedback(null)}
                >
                  ✕
                </button>
              </div>

              <div className="feedback-comparison">
                <div className="teacher-feedback-section">
                  <h3>
                    {user.type === "parent" ||
                    user.type === "Parent" ||
                    user.type === "PARENT"
                      ? "쌤이 작성한 피드백"
                      : user.type === "teacher" ||
                        user.type === "Teacher" ||
                        user.type === "TEACHER" ||
                        user.type === "tutor" ||
                        user.type === "Tutor" ||
                        user.type === "TUTOR"
                      ? "내가 작성한 피드백"
                      : user.type === "admin"
                      ? "쌤이 작성한 피드백 (좌측)"
                      : "쌤이 작성한 피드백"}
                  </h3>
                  {user.type === "parent" ||
                  user.type === "Parent" ||
                  user.type === "PARENT" ||
                  user.type === "admin" ? (
                    <div className="feedback-content-box">
                      <div className="feedback-section">
                        <h4>아이의 상태</h4>
                        <p>{selectedFeedback.teacherFeedback.childStatus}</p>
                      </div>
                      <div className="feedback-section">
                        <h4>아이의 태도</h4>
                        <p>{selectedFeedback.teacherFeedback.childAttitude}</p>
                      </div>
                      <div className="feedback-section">
                        <h4>개선 사항</h4>
                        <p>{selectedFeedback.teacherFeedback.improvement}</p>
                      </div>
                      <div className="feedback-section">
                        <h4>추가 메모</h4>
                        <p>
                          {selectedFeedback.teacherFeedback.additionalNotes}
                        </p>
                      </div>
                      {user.type === "admin" && (
                        <div className="admin-note">
                          <p>
                            💡 관리자: 쌤의 피드백을 확인하고 우측에서 부모님의
                            응답을 확인하세요.
                          </p>
                        </div>
                      )}
                    </div>
                  ) : (
                    <div className="feedback-content-box">
                      {isTeacherWriting ? (
                        <div className="feedback-form">
                          <textarea
                            value={teacherResponse}
                            onChange={(e) => setTeacherResponse(e.target.value)}
                            placeholder="아이의 오늘 수업 상태를 자세히 작성해주세요..."
                            rows="8"
                            className="feedback-textarea"
                          />
                          <div className="feedback-actions">
                            <button
                              className="submit-button"
                              onClick={handleSubmitTeacherFeedback}
                              disabled={!teacherResponse.trim()}
                            >
                              피드백 제출
                            </button>
                            <button
                              className="cancel-button"
                              onClick={() => setIsTeacherWriting(false)}
                            >
                              취소
                            </button>
                          </div>
                        </div>
                      ) : (
                        <>
                          <div className="feedback-section">
                            <h4>아이의 상태</h4>
                            <p>
                              {selectedFeedback.teacherFeedback.childStatus}
                            </p>
                          </div>
                          <div className="feedback-section">
                            <h4>아이의 태도</h4>
                            <p>
                              {selectedFeedback.teacherFeedback.childAttitude}
                            </p>
                          </div>
                          <div className="feedback-section">
                            <h4>개선 사항</h4>
                            <p>
                              {selectedFeedback.teacherFeedback.improvement}
                            </p>
                          </div>
                          <div className="feedback-section">
                            <h4>추가 메모</h4>
                            <p>
                              {selectedFeedback.teacherFeedback.additionalNotes}
                            </p>
                          </div>
                          <div className="feedback-actions">
                            <button
                              className="edit-button"
                              onClick={() => setIsTeacherWriting(true)}
                            >
                              피드백 수정
                            </button>
                          </div>
                        </>
                      )}
                    </div>
                  )}
                </div>

                <div className="parent-feedback-section">
                  <h3>
                    {user.type === "parent" ||
                    user.type === "Parent" ||
                    user.type === "PARENT"
                      ? "내가 작성할 피드백"
                      : user.type === "teacher" ||
                        user.type === "Teacher" ||
                        user.type === "TEACHER" ||
                        user.type === "tutor" ||
                        user.type === "Tutor" ||
                        user.type === "TUTOR"
                      ? "부모님과의 소통"
                      : user.type === "admin"
                      ? "부모님의 피드백 (우측)"
                      : "부모님의 피드백"}
                  </h3>
                  {user.type === "parent" ||
                  user.type === "Parent" ||
                  user.type === "PARENT" ? (
                    selectedFeedback.parentFeedback &&
                    selectedFeedback.parentFeedback.trim() ? (
                      <div className="feedback-content-box">
                        <div className="feedback-section">
                          <h4>내가 작성한 피드백</h4>
                          <p>{selectedFeedback.parentFeedback}</p>
                        </div>
                        <div className="feedback-actions">
                          <button
                            className="edit-button"
                            onClick={() => {
                              setParentResponse(
                                selectedFeedback.parentFeedback
                              );
                              // 수정 모드로 전환
                              setSelectedFeedback({
                                ...selectedFeedback,
                                parentFeedback: "",
                              });
                            }}
                          >
                            수정하기
                          </button>
                        </div>
                      </div>
                    ) : (
                      <div className="feedback-form">
                        <h4>쌤에게 피드백 작성하기</h4>
                        <textarea
                          value={parentResponse}
                          onChange={(e) => setParentResponse(e.target.value)}
                          placeholder="아이의 상태, 태도, 바라는 점 등을 자유롭게 작성해주세요..."
                          rows="8"
                          className="feedback-textarea"
                        />
                        <div className="feedback-actions">
                          <button
                            className="submit-button"
                            onClick={handleSubmitFeedback}
                            disabled={!parentResponse.trim()}
                          >
                            전송
                          </button>
                        </div>
                        <div className="payment-notice">
                          <p>💡 전송과 동시에 오늘 쌤 일당이 지급됩니다.</p>
                        </div>
                      </div>
                    )
                  ) : user.type === "teacher" ||
                    user.type === "Teacher" ||
                    user.type === "TEACHER" ||
                    user.type === "tutor" ||
                    user.type === "Tutor" ||
                    user.type === "TUTOR" ? (
                    <div className="feedback-content-box">
                      {selectedFeedback.parentFeedback &&
                      selectedFeedback.parentFeedback.trim() ? (
                        <>
                          <div className="feedback-section">
                            <h4>부모님의 응답</h4>
                            <p>{selectedFeedback.parentFeedback}</p>
                          </div>
                          <div className="feedback-actions">
                            <button
                              className="edit-button"
                              onClick={() => setIsTeacherSendingToParent(true)}
                            >
                              부모님에게 메시지 전송
                            </button>
                          </div>
                        </>
                      ) : (
                        <>
                          <div className="empty-state">
                            <p>아직 부모님의 피드백이 없습니다.</p>
                            <p>부모님이 피드백을 작성하면 여기에 표시됩니다.</p>
                            <div className="waiting-indicator">
                              <div className="waiting-dots">
                                <span></span>
                                <span></span>
                                <span></span>
                              </div>
                              <p>부모님 피드백 대기 중...</p>
                            </div>
                          </div>
                          <div className="feedback-actions">
                            <button
                              className="edit-button"
                              onClick={() => setIsTeacherSendingToParent(true)}
                            >
                              부모님에게 메시지 전송
                            </button>
                          </div>
                        </>
                      )}
                      {isTeacherSendingToParent && (
                        <div className="feedback-form">
                          <h4>부모님에게 메시지 전송</h4>
                          <textarea
                            value={teacherToParentMessage}
                            onChange={(e) =>
                              setTeacherToParentMessage(e.target.value)
                            }
                            placeholder="부모님에게 전달할 메시지를 작성해주세요..."
                            rows="6"
                            className="feedback-textarea"
                          />
                          <div className="feedback-actions">
                            <button
                              className="submit-button"
                              onClick={handleTeacherSendToParent}
                              disabled={!teacherToParentMessage.trim()}
                            >
                              메시지 전송
                            </button>
                            <button
                              className="cancel-button"
                              onClick={() => setIsTeacherSendingToParent(false)}
                            >
                              취소
                            </button>
                          </div>
                        </div>
                      )}
                    </div>
                  ) : user.type === "admin" ? (
                    <div className="feedback-content-box">
                      {selectedFeedback.parentFeedback &&
                      selectedFeedback.parentFeedback.trim() ? (
                        <div className="feedback-section">
                          <h4>부모님의 응답</h4>
                          <p>{selectedFeedback.parentFeedback}</p>
                        </div>
                      ) : (
                        <div className="empty-state">
                          <p>아직 부모님의 피드백이 없습니다.</p>
                          <p>부모님이 피드백을 작성하면 여기에 표시됩니다.</p>
                          <div className="waiting-indicator">
                            <div className="waiting-dots">
                              <span></span>
                              <span></span>
                              <span></span>
                            </div>
                            <p>부모님 피드백 대기 중...</p>
                          </div>
                        </div>
                      )}
                      {selectedFeedback.teacherToParentMessage && (
                        <div className="feedback-section">
                          <h4>쌤이 부모님에게 보낸 메시지</h4>
                          <p>{selectedFeedback.teacherToParentMessage}</p>
                          <small>
                            전송일:{" "}
                            {formatDate(selectedFeedback.teacherToParentSentAt)}
                          </small>
                        </div>
                      )}
                      <div className="admin-note">
                        <p>
                          💡 관리자: 좌측의 쌤 피드백과 우측의 부모님 응답을
                          연계하여 확인하세요.
                        </p>
                      </div>
                    </div>
                  ) : (
                    <div className="feedback-content-box">
                      {selectedFeedback.parentFeedback &&
                      selectedFeedback.parentFeedback.trim() ? (
                        <div className="feedback-section">
                          <h4>부모님의 응답</h4>
                          <p>{selectedFeedback.parentFeedback}</p>
                        </div>
                      ) : (
                        <div className="empty-state">
                          <p>아직 부모님의 피드백이 없습니다.</p>
                          <p>부모님이 피드백을 작성하면 여기에 표시됩니다.</p>
                          <div className="waiting-indicator">
                            <div className="waiting-dots">
                              <span></span>
                              <span></span>
                              <span></span>
                            </div>
                            <p>부모님 피드백 대기 중...</p>
                          </div>
                        </div>
                      )}
                      {selectedFeedback.teacherToParentMessage && (
                        <div className="feedback-section">
                          <h4>쌤이 부모님에게 보낸 메시지</h4>
                          <p>{selectedFeedback.teacherToParentMessage}</p>
                          <small>
                            전송일:{" "}
                            {formatDate(selectedFeedback.teacherToParentSentAt)}
                          </small>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default Feedback;
